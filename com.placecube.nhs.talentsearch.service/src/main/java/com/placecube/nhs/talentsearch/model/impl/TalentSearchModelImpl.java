/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.placecube.nhs.talentsearch.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.placecube.nhs.talentsearch.model.TalentSearch;
import com.placecube.nhs.talentsearch.model.TalentSearchModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the TalentSearch service. Represents a row in the &quot;NHS_TalentSearch_TalentSearch&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>TalentSearchModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TalentSearchImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TalentSearchImpl
 * @generated
 */
@ProviderType
public class TalentSearchModelImpl
	extends BaseModelImpl<TalentSearch> implements TalentSearchModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a talent search model instance should use the <code>TalentSearch</code> interface instead.
	 */
	public static final String TABLE_NAME = "NHS_TalentSearch_TalentSearch";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"talentSearchId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"name", Types.VARCHAR}, {"typeId", Types.BIGINT},
		{"categoryId", Types.BIGINT}, {"queryFilter", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("talentSearchId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("categoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("queryFilter", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table NHS_TalentSearch_TalentSearch (uuid_ VARCHAR(75) null,talentSearchId LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,name VARCHAR(200) null,typeId LONG,categoryId LONG,queryFilter STRING null)";

	public static final String TABLE_SQL_DROP =
		"drop table NHS_TalentSearch_TalentSearch";

	public static final String ORDER_BY_JPQL =
		" ORDER BY talentSearch.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY NHS_TalentSearch_TalentSearch.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long USERID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long CREATEDATE_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public TalentSearchModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _talentSearchId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTalentSearchId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _talentSearchId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TalentSearch.class;
	}

	@Override
	public String getModelClassName() {
		return TalentSearch.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TalentSearch, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TalentSearch, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TalentSearch, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((TalentSearch)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TalentSearch, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TalentSearch, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TalentSearch)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TalentSearch, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TalentSearch, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, TalentSearch>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			TalentSearch.class.getClassLoader(), TalentSearch.class,
			ModelWrapper.class);

		try {
			Constructor<TalentSearch> constructor =
				(Constructor<TalentSearch>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<TalentSearch, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TalentSearch, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TalentSearch, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<TalentSearch, Object>>();
		Map<String, BiConsumer<TalentSearch, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<TalentSearch, ?>>();

		attributeGetterFunctions.put("uuid", TalentSearch::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<TalentSearch, String>)TalentSearch::setUuid);
		attributeGetterFunctions.put(
			"talentSearchId", TalentSearch::getTalentSearchId);
		attributeSetterBiConsumers.put(
			"talentSearchId",
			(BiConsumer<TalentSearch, Long>)TalentSearch::setTalentSearchId);
		attributeGetterFunctions.put("companyId", TalentSearch::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<TalentSearch, Long>)TalentSearch::setCompanyId);
		attributeGetterFunctions.put("userId", TalentSearch::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<TalentSearch, Long>)TalentSearch::setUserId);
		attributeGetterFunctions.put("createDate", TalentSearch::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<TalentSearch, Date>)TalentSearch::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", TalentSearch::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<TalentSearch, Date>)TalentSearch::setModifiedDate);
		attributeGetterFunctions.put("name", TalentSearch::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<TalentSearch, String>)TalentSearch::setName);
		attributeGetterFunctions.put("typeId", TalentSearch::getTypeId);
		attributeSetterBiConsumers.put(
			"typeId", (BiConsumer<TalentSearch, Long>)TalentSearch::setTypeId);
		attributeGetterFunctions.put("categoryId", TalentSearch::getCategoryId);
		attributeSetterBiConsumers.put(
			"categoryId",
			(BiConsumer<TalentSearch, Long>)TalentSearch::setCategoryId);
		attributeGetterFunctions.put(
			"queryFilter", TalentSearch::getQueryFilter);
		attributeSetterBiConsumers.put(
			"queryFilter",
			(BiConsumer<TalentSearch, String>)TalentSearch::setQueryFilter);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getTalentSearchId() {
		return _talentSearchId;
	}

	@Override
	public void setTalentSearchId(long talentSearchId) {
		_talentSearchId = talentSearchId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public long getTypeId() {
		return _typeId;
	}

	@Override
	public void setTypeId(long typeId) {
		_typeId = typeId;
	}

	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		_categoryId = categoryId;
	}

	@Override
	public String getQueryFilter() {
		if (_queryFilter == null) {
			return "";
		}
		else {
			return _queryFilter;
		}
	}

	@Override
	public void setQueryFilter(String queryFilter) {
		_queryFilter = queryFilter;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(TalentSearch.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TalentSearch.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TalentSearch toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TalentSearchImpl talentSearchImpl = new TalentSearchImpl();

		talentSearchImpl.setUuid(getUuid());
		talentSearchImpl.setTalentSearchId(getTalentSearchId());
		talentSearchImpl.setCompanyId(getCompanyId());
		talentSearchImpl.setUserId(getUserId());
		talentSearchImpl.setCreateDate(getCreateDate());
		talentSearchImpl.setModifiedDate(getModifiedDate());
		talentSearchImpl.setName(getName());
		talentSearchImpl.setTypeId(getTypeId());
		talentSearchImpl.setCategoryId(getCategoryId());
		talentSearchImpl.setQueryFilter(getQueryFilter());

		talentSearchImpl.resetOriginalValues();

		return talentSearchImpl;
	}

	@Override
	public int compareTo(TalentSearch talentSearch) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), talentSearch.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TalentSearch)) {
			return false;
		}

		TalentSearch talentSearch = (TalentSearch)obj;

		long primaryKey = talentSearch.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		TalentSearchModelImpl talentSearchModelImpl = this;

		talentSearchModelImpl._originalUuid = talentSearchModelImpl._uuid;

		talentSearchModelImpl._originalCompanyId =
			talentSearchModelImpl._companyId;

		talentSearchModelImpl._setOriginalCompanyId = false;

		talentSearchModelImpl._originalUserId = talentSearchModelImpl._userId;

		talentSearchModelImpl._setOriginalUserId = false;

		talentSearchModelImpl._setModifiedDate = false;

		talentSearchModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TalentSearch> toCacheModel() {
		TalentSearchCacheModel talentSearchCacheModel =
			new TalentSearchCacheModel();

		talentSearchCacheModel.uuid = getUuid();

		String uuid = talentSearchCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			talentSearchCacheModel.uuid = null;
		}

		talentSearchCacheModel.talentSearchId = getTalentSearchId();

		talentSearchCacheModel.companyId = getCompanyId();

		talentSearchCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			talentSearchCacheModel.createDate = createDate.getTime();
		}
		else {
			talentSearchCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			talentSearchCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			talentSearchCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		talentSearchCacheModel.name = getName();

		String name = talentSearchCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			talentSearchCacheModel.name = null;
		}

		talentSearchCacheModel.typeId = getTypeId();

		talentSearchCacheModel.categoryId = getCategoryId();

		talentSearchCacheModel.queryFilter = getQueryFilter();

		String queryFilter = talentSearchCacheModel.queryFilter;

		if ((queryFilter != null) && (queryFilter.length() == 0)) {
			talentSearchCacheModel.queryFilter = null;
		}

		return talentSearchCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TalentSearch, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TalentSearch, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TalentSearch, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((TalentSearch)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<TalentSearch, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<TalentSearch, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TalentSearch, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((TalentSearch)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, TalentSearch>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _talentSearchId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private long _typeId;
	private long _categoryId;
	private String _queryFilter;
	private long _columnBitmask;
	private TalentSearch _escapedModel;

}