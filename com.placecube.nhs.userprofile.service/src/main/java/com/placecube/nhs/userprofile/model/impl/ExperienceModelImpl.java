/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.placecube.nhs.userprofile.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.placecube.nhs.userprofile.model.Experience;
import com.placecube.nhs.userprofile.model.ExperienceModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Experience service. Represents a row in the &quot;NHS_Experience&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ExperienceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExperienceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ExperienceImpl
 * @generated
 */
@ProviderType
public class ExperienceModelImpl
	extends BaseModelImpl<Experience> implements ExperienceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a experience model instance should use the <code>Experience</code> interface instead.
	 */
	public static final String TABLE_NAME = "NHS_Experience";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"experienceId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"placeOfWork", Types.VARCHAR},
		{"role_", Types.VARCHAR}, {"current", Types.BOOLEAN},
		{"fromDate", Types.TIMESTAMP}, {"toDate", Types.TIMESTAMP},
		{"validated", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("experienceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("placeOfWork", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("role_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("current", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("fromDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("toDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("validated", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table NHS_Experience (uuid_ VARCHAR(75) null,experienceId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,placeOfWork VARCHAR(500) null,role_ VARCHAR(500) null,current BOOLEAN,fromDate DATE null,toDate DATE null,validated BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table NHS_Experience";

	public static final String ORDER_BY_JPQL =
		" ORDER BY experience.fromDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY NHS_Experience.fromDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long USERID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long FROMDATE_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public ExperienceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _experienceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExperienceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _experienceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Experience.class;
	}

	@Override
	public String getModelClassName() {
		return Experience.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Experience, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Experience, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Experience, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Experience)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Experience, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Experience, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Experience)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Experience, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Experience, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Experience>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Experience.class.getClassLoader(), Experience.class,
			ModelWrapper.class);

		try {
			Constructor<Experience> constructor =
				(Constructor<Experience>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Experience, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Experience, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Experience, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Experience, Object>>();
		Map<String, BiConsumer<Experience, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Experience, ?>>();

		attributeGetterFunctions.put("uuid", Experience::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Experience, String>)Experience::setUuid);
		attributeGetterFunctions.put(
			"experienceId", Experience::getExperienceId);
		attributeSetterBiConsumers.put(
			"experienceId",
			(BiConsumer<Experience, Long>)Experience::setExperienceId);
		attributeGetterFunctions.put("companyId", Experience::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<Experience, Long>)Experience::setCompanyId);
		attributeGetterFunctions.put("userId", Experience::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Experience, Long>)Experience::setUserId);
		attributeGetterFunctions.put("userName", Experience::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<Experience, String>)Experience::setUserName);
		attributeGetterFunctions.put("createDate", Experience::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Experience, Date>)Experience::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", Experience::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Experience, Date>)Experience::setModifiedDate);
		attributeGetterFunctions.put("placeOfWork", Experience::getPlaceOfWork);
		attributeSetterBiConsumers.put(
			"placeOfWork",
			(BiConsumer<Experience, String>)Experience::setPlaceOfWork);
		attributeGetterFunctions.put("role", Experience::getRole);
		attributeSetterBiConsumers.put(
			"role", (BiConsumer<Experience, String>)Experience::setRole);
		attributeGetterFunctions.put("current", Experience::getCurrent);
		attributeSetterBiConsumers.put(
			"current", (BiConsumer<Experience, Boolean>)Experience::setCurrent);
		attributeGetterFunctions.put("fromDate", Experience::getFromDate);
		attributeSetterBiConsumers.put(
			"fromDate", (BiConsumer<Experience, Date>)Experience::setFromDate);
		attributeGetterFunctions.put("toDate", Experience::getToDate);
		attributeSetterBiConsumers.put(
			"toDate", (BiConsumer<Experience, Date>)Experience::setToDate);
		attributeGetterFunctions.put("validated", Experience::getValidated);
		attributeSetterBiConsumers.put(
			"validated",
			(BiConsumer<Experience, Boolean>)Experience::setValidated);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getExperienceId() {
		return _experienceId;
	}

	@Override
	public void setExperienceId(long experienceId) {
		_experienceId = experienceId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getPlaceOfWork() {
		if (_placeOfWork == null) {
			return "";
		}
		else {
			return _placeOfWork;
		}
	}

	@Override
	public void setPlaceOfWork(String placeOfWork) {
		_placeOfWork = placeOfWork;
	}

	@Override
	public String getRole() {
		if (_role == null) {
			return "";
		}
		else {
			return _role;
		}
	}

	@Override
	public void setRole(String role) {
		_role = role;
	}

	@Override
	public boolean getCurrent() {
		return _current;
	}

	@Override
	public boolean isCurrent() {
		return _current;
	}

	@Override
	public void setCurrent(boolean current) {
		_current = current;
	}

	@Override
	public Date getFromDate() {
		return _fromDate;
	}

	@Override
	public void setFromDate(Date fromDate) {
		_columnBitmask = -1L;

		_fromDate = fromDate;
	}

	@Override
	public Date getToDate() {
		return _toDate;
	}

	@Override
	public void setToDate(Date toDate) {
		_toDate = toDate;
	}

	@Override
	public boolean getValidated() {
		return _validated;
	}

	@Override
	public boolean isValidated() {
		return _validated;
	}

	@Override
	public void setValidated(boolean validated) {
		_validated = validated;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Experience.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Experience.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Experience toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExperienceImpl experienceImpl = new ExperienceImpl();

		experienceImpl.setUuid(getUuid());
		experienceImpl.setExperienceId(getExperienceId());
		experienceImpl.setCompanyId(getCompanyId());
		experienceImpl.setUserId(getUserId());
		experienceImpl.setUserName(getUserName());
		experienceImpl.setCreateDate(getCreateDate());
		experienceImpl.setModifiedDate(getModifiedDate());
		experienceImpl.setPlaceOfWork(getPlaceOfWork());
		experienceImpl.setRole(getRole());
		experienceImpl.setCurrent(isCurrent());
		experienceImpl.setFromDate(getFromDate());
		experienceImpl.setToDate(getToDate());
		experienceImpl.setValidated(isValidated());

		experienceImpl.resetOriginalValues();

		return experienceImpl;
	}

	@Override
	public int compareTo(Experience experience) {
		int value = 0;

		value = DateUtil.compareTo(getFromDate(), experience.getFromDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Experience)) {
			return false;
		}

		Experience experience = (Experience)obj;

		long primaryKey = experience.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ExperienceModelImpl experienceModelImpl = this;

		experienceModelImpl._originalUuid = experienceModelImpl._uuid;

		experienceModelImpl._originalCompanyId = experienceModelImpl._companyId;

		experienceModelImpl._setOriginalCompanyId = false;

		experienceModelImpl._originalUserId = experienceModelImpl._userId;

		experienceModelImpl._setOriginalUserId = false;

		experienceModelImpl._setModifiedDate = false;

		experienceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Experience> toCacheModel() {
		ExperienceCacheModel experienceCacheModel = new ExperienceCacheModel();

		experienceCacheModel.uuid = getUuid();

		String uuid = experienceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			experienceCacheModel.uuid = null;
		}

		experienceCacheModel.experienceId = getExperienceId();

		experienceCacheModel.companyId = getCompanyId();

		experienceCacheModel.userId = getUserId();

		experienceCacheModel.userName = getUserName();

		String userName = experienceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			experienceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			experienceCacheModel.createDate = createDate.getTime();
		}
		else {
			experienceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			experienceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			experienceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		experienceCacheModel.placeOfWork = getPlaceOfWork();

		String placeOfWork = experienceCacheModel.placeOfWork;

		if ((placeOfWork != null) && (placeOfWork.length() == 0)) {
			experienceCacheModel.placeOfWork = null;
		}

		experienceCacheModel.role = getRole();

		String role = experienceCacheModel.role;

		if ((role != null) && (role.length() == 0)) {
			experienceCacheModel.role = null;
		}

		experienceCacheModel.current = isCurrent();

		Date fromDate = getFromDate();

		if (fromDate != null) {
			experienceCacheModel.fromDate = fromDate.getTime();
		}
		else {
			experienceCacheModel.fromDate = Long.MIN_VALUE;
		}

		Date toDate = getToDate();

		if (toDate != null) {
			experienceCacheModel.toDate = toDate.getTime();
		}
		else {
			experienceCacheModel.toDate = Long.MIN_VALUE;
		}

		experienceCacheModel.validated = isValidated();

		return experienceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Experience, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Experience, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Experience, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Experience)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Experience, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Experience, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Experience, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Experience)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Experience>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _experienceId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _placeOfWork;
	private String _role;
	private boolean _current;
	private Date _fromDate;
	private Date _toDate;
	private boolean _validated;
	private long _columnBitmask;
	private Experience _escapedModel;

}