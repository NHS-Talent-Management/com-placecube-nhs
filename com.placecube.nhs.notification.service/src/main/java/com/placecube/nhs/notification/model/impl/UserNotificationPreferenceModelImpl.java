/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.placecube.nhs.notification.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.placecube.nhs.notification.model.UserNotificationPreference;
import com.placecube.nhs.notification.model.UserNotificationPreferenceModel;
import com.placecube.nhs.notification.service.persistence.UserNotificationPreferencePK;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the UserNotificationPreference service. Represents a row in the &quot;NHS_Notification_UserNotificationPreference&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>UserNotificationPreferenceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserNotificationPreferenceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserNotificationPreferenceImpl
 * @generated
 */
@ProviderType
public class UserNotificationPreferenceModelImpl
	extends BaseModelImpl<UserNotificationPreference>
	implements UserNotificationPreferenceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user notification preference model instance should use the <code>UserNotificationPreference</code> interface instead.
	 */
	public static final String TABLE_NAME =
		"NHS_Notification_UserNotificationPreference";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"userId", Types.BIGINT},
		{"notificationType", Types.INTEGER}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"enabled", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("notificationType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("enabled", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table NHS_Notification_UserNotificationPreference (uuid_ VARCHAR(75) null,userId LONG not null,notificationType INTEGER not null,createDate DATE null,modifiedDate DATE null,enabled BOOLEAN,primary key (userId, notificationType))";

	public static final String TABLE_SQL_DROP =
		"drop table NHS_Notification_UserNotificationPreference";

	public static final String ORDER_BY_JPQL =
		" ORDER BY userNotificationPreference.id.userId ASC, userNotificationPreference.id.notificationType ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY NHS_Notification_UserNotificationPreference.userId ASC, NHS_Notification_UserNotificationPreference.notificationType ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ENABLED_COLUMN_BITMASK = 1L;

	public static final long NOTIFICATIONTYPE_COLUMN_BITMASK = 2L;

	public static final long USERID_COLUMN_BITMASK = 4L;

	public static final long UUID_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public UserNotificationPreferenceModelImpl() {
	}

	@Override
	public UserNotificationPreferencePK getPrimaryKey() {
		return new UserNotificationPreferencePK(_userId, _notificationType);
	}

	@Override
	public void setPrimaryKey(UserNotificationPreferencePK primaryKey) {
		setUserId(primaryKey.userId);
		setNotificationType(primaryKey.notificationType);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new UserNotificationPreferencePK(_userId, _notificationType);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((UserNotificationPreferencePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return UserNotificationPreference.class;
	}

	@Override
	public String getModelClassName() {
		return UserNotificationPreference.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UserNotificationPreference, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<UserNotificationPreference, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserNotificationPreference, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(UserNotificationPreference)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UserNotificationPreference, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UserNotificationPreference, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UserNotificationPreference)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<UserNotificationPreference, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<UserNotificationPreference, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, UserNotificationPreference>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			UserNotificationPreference.class.getClassLoader(),
			UserNotificationPreference.class, ModelWrapper.class);

		try {
			Constructor<UserNotificationPreference> constructor =
				(Constructor<UserNotificationPreference>)
					proxyClass.getConstructor(InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map
		<String, Function<UserNotificationPreference, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<UserNotificationPreference, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<UserNotificationPreference, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<UserNotificationPreference, Object>>();
		Map<String, BiConsumer<UserNotificationPreference, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<UserNotificationPreference, ?>>();

		attributeGetterFunctions.put(
			"uuid", UserNotificationPreference::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<UserNotificationPreference, String>)
				UserNotificationPreference::setUuid);
		attributeGetterFunctions.put(
			"userId", UserNotificationPreference::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<UserNotificationPreference, Long>)
				UserNotificationPreference::setUserId);
		attributeGetterFunctions.put(
			"notificationType",
			UserNotificationPreference::getNotificationType);
		attributeSetterBiConsumers.put(
			"notificationType",
			(BiConsumer<UserNotificationPreference, Integer>)
				UserNotificationPreference::setNotificationType);
		attributeGetterFunctions.put(
			"createDate", UserNotificationPreference::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<UserNotificationPreference, Date>)
				UserNotificationPreference::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", UserNotificationPreference::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<UserNotificationPreference, Date>)
				UserNotificationPreference::setModifiedDate);
		attributeGetterFunctions.put(
			"enabled", UserNotificationPreference::getEnabled);
		attributeSetterBiConsumers.put(
			"enabled",
			(BiConsumer<UserNotificationPreference, Boolean>)
				UserNotificationPreference::setEnabled);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public int getNotificationType() {
		return _notificationType;
	}

	@Override
	public void setNotificationType(int notificationType) {
		_columnBitmask |= NOTIFICATIONTYPE_COLUMN_BITMASK;

		if (!_setOriginalNotificationType) {
			_setOriginalNotificationType = true;

			_originalNotificationType = _notificationType;
		}

		_notificationType = notificationType;
	}

	public int getOriginalNotificationType() {
		return _originalNotificationType;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public boolean getEnabled() {
		return _enabled;
	}

	@Override
	public boolean isEnabled() {
		return _enabled;
	}

	@Override
	public void setEnabled(boolean enabled) {
		_columnBitmask |= ENABLED_COLUMN_BITMASK;

		if (!_setOriginalEnabled) {
			_setOriginalEnabled = true;

			_originalEnabled = _enabled;
		}

		_enabled = enabled;
	}

	public boolean getOriginalEnabled() {
		return _originalEnabled;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public UserNotificationPreference toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserNotificationPreferenceImpl userNotificationPreferenceImpl =
			new UserNotificationPreferenceImpl();

		userNotificationPreferenceImpl.setUuid(getUuid());
		userNotificationPreferenceImpl.setUserId(getUserId());
		userNotificationPreferenceImpl.setNotificationType(
			getNotificationType());
		userNotificationPreferenceImpl.setCreateDate(getCreateDate());
		userNotificationPreferenceImpl.setModifiedDate(getModifiedDate());
		userNotificationPreferenceImpl.setEnabled(isEnabled());

		userNotificationPreferenceImpl.resetOriginalValues();

		return userNotificationPreferenceImpl;
	}

	@Override
	public int compareTo(
		UserNotificationPreference userNotificationPreference) {

		UserNotificationPreferencePK primaryKey =
			userNotificationPreference.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserNotificationPreference)) {
			return false;
		}

		UserNotificationPreference userNotificationPreference =
			(UserNotificationPreference)obj;

		UserNotificationPreferencePK primaryKey =
			userNotificationPreference.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		UserNotificationPreferenceModelImpl
			userNotificationPreferenceModelImpl = this;

		userNotificationPreferenceModelImpl._originalUuid =
			userNotificationPreferenceModelImpl._uuid;

		userNotificationPreferenceModelImpl._originalUserId =
			userNotificationPreferenceModelImpl._userId;

		userNotificationPreferenceModelImpl._setOriginalUserId = false;

		userNotificationPreferenceModelImpl._originalNotificationType =
			userNotificationPreferenceModelImpl._notificationType;

		userNotificationPreferenceModelImpl._setOriginalNotificationType =
			false;

		userNotificationPreferenceModelImpl._setModifiedDate = false;

		userNotificationPreferenceModelImpl._originalEnabled =
			userNotificationPreferenceModelImpl._enabled;

		userNotificationPreferenceModelImpl._setOriginalEnabled = false;

		userNotificationPreferenceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserNotificationPreference> toCacheModel() {
		UserNotificationPreferenceCacheModel
			userNotificationPreferenceCacheModel =
				new UserNotificationPreferenceCacheModel();

		userNotificationPreferenceCacheModel.userNotificationPreferencePK =
			getPrimaryKey();

		userNotificationPreferenceCacheModel.uuid = getUuid();

		String uuid = userNotificationPreferenceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			userNotificationPreferenceCacheModel.uuid = null;
		}

		userNotificationPreferenceCacheModel.userId = getUserId();

		userNotificationPreferenceCacheModel.notificationType =
			getNotificationType();

		Date createDate = getCreateDate();

		if (createDate != null) {
			userNotificationPreferenceCacheModel.createDate =
				createDate.getTime();
		}
		else {
			userNotificationPreferenceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			userNotificationPreferenceCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			userNotificationPreferenceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		userNotificationPreferenceCacheModel.enabled = isEnabled();

		return userNotificationPreferenceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UserNotificationPreference, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<UserNotificationPreference, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserNotificationPreference, Object>
				attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply(
					(UserNotificationPreference)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<UserNotificationPreference, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<UserNotificationPreference, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserNotificationPreference, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply(
					(UserNotificationPreference)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, UserNotificationPreference>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private int _notificationType;
	private int _originalNotificationType;
	private boolean _setOriginalNotificationType;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private boolean _enabled;
	private boolean _originalEnabled;
	private boolean _setOriginalEnabled;
	private long _columnBitmask;
	private UserNotificationPreference _escapedModel;

}