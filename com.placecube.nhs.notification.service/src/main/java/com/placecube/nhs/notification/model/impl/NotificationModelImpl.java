/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.placecube.nhs.notification.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.placecube.nhs.notification.model.Notification;
import com.placecube.nhs.notification.model.NotificationModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Notification service. Represents a row in the &quot;NHS_Notification_Notification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>NotificationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotificationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NotificationImpl
 * @generated
 */
@ProviderType
public class NotificationModelImpl
	extends BaseModelImpl<Notification> implements NotificationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a notification model instance should use the <code>Notification</code> interface instead.
	 */
	public static final String TABLE_NAME = "NHS_Notification_Notification";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"notificationId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"notificationType", Types.INTEGER},
		{"summary", Types.VARCHAR}, {"body", Types.VARCHAR},
		{"receiverUserIds", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("notificationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("notificationType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("summary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("body", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("receiverUserIds", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table NHS_Notification_Notification (uuid_ VARCHAR(75) null,notificationId LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,status INTEGER,notificationType INTEGER,summary VARCHAR(200) null,body STRING null,receiverUserIds STRING null)";

	public static final String TABLE_SQL_DROP =
		"drop table NHS_Notification_Notification";

	public static final String ORDER_BY_JPQL =
		" ORDER BY notification.notificationId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY NHS_Notification_Notification.notificationId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long UUID_COLUMN_BITMASK = 2L;

	public static final long NOTIFICATIONID_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public NotificationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _notificationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNotificationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _notificationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Notification.class;
	}

	@Override
	public String getModelClassName() {
		return Notification.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Notification, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Notification, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Notification, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Notification)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Notification, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Notification, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Notification)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Notification, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Notification, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Notification>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Notification.class.getClassLoader(), Notification.class,
			ModelWrapper.class);

		try {
			Constructor<Notification> constructor =
				(Constructor<Notification>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Notification, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Notification, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Notification, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Notification, Object>>();
		Map<String, BiConsumer<Notification, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Notification, ?>>();

		attributeGetterFunctions.put("uuid", Notification::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Notification, String>)Notification::setUuid);
		attributeGetterFunctions.put(
			"notificationId", Notification::getNotificationId);
		attributeSetterBiConsumers.put(
			"notificationId",
			(BiConsumer<Notification, Long>)Notification::setNotificationId);
		attributeGetterFunctions.put("companyId", Notification::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<Notification, Long>)Notification::setCompanyId);
		attributeGetterFunctions.put("userId", Notification::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Notification, Long>)Notification::setUserId);
		attributeGetterFunctions.put("createDate", Notification::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Notification, Date>)Notification::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", Notification::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Notification, Date>)Notification::setModifiedDate);
		attributeGetterFunctions.put("status", Notification::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<Notification, Integer>)Notification::setStatus);
		attributeGetterFunctions.put(
			"notificationType", Notification::getNotificationType);
		attributeSetterBiConsumers.put(
			"notificationType",
			(BiConsumer<Notification, Integer>)
				Notification::setNotificationType);
		attributeGetterFunctions.put("summary", Notification::getSummary);
		attributeSetterBiConsumers.put(
			"summary",
			(BiConsumer<Notification, String>)Notification::setSummary);
		attributeGetterFunctions.put("body", Notification::getBody);
		attributeSetterBiConsumers.put(
			"body", (BiConsumer<Notification, String>)Notification::setBody);
		attributeGetterFunctions.put(
			"receiverUserIds", Notification::getReceiverUserIds);
		attributeSetterBiConsumers.put(
			"receiverUserIds",
			(BiConsumer<Notification, String>)Notification::setReceiverUserIds);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getNotificationId() {
		return _notificationId;
	}

	@Override
	public void setNotificationId(long notificationId) {
		_notificationId = notificationId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public int getNotificationType() {
		return _notificationType;
	}

	@Override
	public void setNotificationType(int notificationType) {
		_notificationType = notificationType;
	}

	@Override
	public String getSummary() {
		if (_summary == null) {
			return "";
		}
		else {
			return _summary;
		}
	}

	@Override
	public void setSummary(String summary) {
		_summary = summary;
	}

	@Override
	public String getBody() {
		if (_body == null) {
			return "";
		}
		else {
			return _body;
		}
	}

	@Override
	public void setBody(String body) {
		_body = body;
	}

	@Override
	public String getReceiverUserIds() {
		if (_receiverUserIds == null) {
			return "";
		}
		else {
			return _receiverUserIds;
		}
	}

	@Override
	public void setReceiverUserIds(String receiverUserIds) {
		_receiverUserIds = receiverUserIds;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Notification.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Notification.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Notification toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NotificationImpl notificationImpl = new NotificationImpl();

		notificationImpl.setUuid(getUuid());
		notificationImpl.setNotificationId(getNotificationId());
		notificationImpl.setCompanyId(getCompanyId());
		notificationImpl.setUserId(getUserId());
		notificationImpl.setCreateDate(getCreateDate());
		notificationImpl.setModifiedDate(getModifiedDate());
		notificationImpl.setStatus(getStatus());
		notificationImpl.setNotificationType(getNotificationType());
		notificationImpl.setSummary(getSummary());
		notificationImpl.setBody(getBody());
		notificationImpl.setReceiverUserIds(getReceiverUserIds());

		notificationImpl.resetOriginalValues();

		return notificationImpl;
	}

	@Override
	public int compareTo(Notification notification) {
		long primaryKey = notification.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Notification)) {
			return false;
		}

		Notification notification = (Notification)obj;

		long primaryKey = notification.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		NotificationModelImpl notificationModelImpl = this;

		notificationModelImpl._originalUuid = notificationModelImpl._uuid;

		notificationModelImpl._originalCompanyId =
			notificationModelImpl._companyId;

		notificationModelImpl._setOriginalCompanyId = false;

		notificationModelImpl._setModifiedDate = false;

		notificationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Notification> toCacheModel() {
		NotificationCacheModel notificationCacheModel =
			new NotificationCacheModel();

		notificationCacheModel.uuid = getUuid();

		String uuid = notificationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			notificationCacheModel.uuid = null;
		}

		notificationCacheModel.notificationId = getNotificationId();

		notificationCacheModel.companyId = getCompanyId();

		notificationCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			notificationCacheModel.createDate = createDate.getTime();
		}
		else {
			notificationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			notificationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			notificationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		notificationCacheModel.status = getStatus();

		notificationCacheModel.notificationType = getNotificationType();

		notificationCacheModel.summary = getSummary();

		String summary = notificationCacheModel.summary;

		if ((summary != null) && (summary.length() == 0)) {
			notificationCacheModel.summary = null;
		}

		notificationCacheModel.body = getBody();

		String body = notificationCacheModel.body;

		if ((body != null) && (body.length() == 0)) {
			notificationCacheModel.body = null;
		}

		notificationCacheModel.receiverUserIds = getReceiverUserIds();

		String receiverUserIds = notificationCacheModel.receiverUserIds;

		if ((receiverUserIds != null) && (receiverUserIds.length() == 0)) {
			notificationCacheModel.receiverUserIds = null;
		}

		return notificationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Notification, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Notification, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Notification, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Notification)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Notification, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Notification, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Notification, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Notification)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Notification>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _notificationId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private int _notificationType;
	private String _summary;
	private String _body;
	private String _receiverUserIds;
	private long _columnBitmask;
	private Notification _escapedModel;

}